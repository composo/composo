variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    PYPI_SERVER: $PYPI_SERVER # address of the local PyPi Server

    GITLAB_CI_USER_EMAIL: $GITLAB_CI_USER_EMAIL # mail address of the GitLab CI user
    GITLAB_CI_USER_NAME: $GITLAB_CI_USER_NAME # name of the GitLab CI user
    CI_GITLAB_ADDRESS: $CI_GITLAB_ADDRESS # name of the GitLab CI user
    CI_RUNNER_TAG_COMMON: $CI_RUNNER_TAG_COMMON
    CI_REPO_TOKEN_NAME: $CI_REPO_TOKEN_NAME
    CI_REPO_TOKEN_VALUE: $CI_REPO_TOKEN_VALUE

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching

# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip


stages:
    - test
    - cml
    - release
pytest:
    tags:
        - $CI_RUNNER_TAG_COMMON
    image: python:3.8
    stage: test
    before_script:
        - curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 -
        - export PATH="/opt/poetry/bin:$PATH"
        - poetry config http-basic.autolern-pypi $CI_REPO_TOKEN_NAME $CI_REPO_TOKEN_VALUE
        - poetry --version
        - poetry run python -V  # Print out python version for debugging
        - poetry config --local virtualenvs.in-project true
        - poetry install --with test
    script:
        - poetry run tox -e py38
    cache:
      paths:
        - .venv
        - .tox
    artifacts:
      reports:
        coverage_report:
          coverage_format: cobertura
          path: coverage.xml
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push" # This job should not be triggered by the versioning push.
          changes:
          - VERSION.txt
          when: never
        # - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG != "stable" # The job shall not run if a tag is pushed to the repository which is not a "stable" tag.
        #   when: never
        - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
mypy:
    tags:
        - $CI_RUNNER_TAG_COMMON
    image: python:3.8
    stage: test
    before_script:
        - curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 -
        - export PATH="/opt/poetry/bin:$PATH"
        - poetry config http-basic.autolern-pypi $CI_REPO_TOKEN_NAME $CI_REPO_TOKEN_VALUE
        - poetry --version
        - poetry config --local virtualenvs.in-project true
        - poetry install --with test
    script:
        - poetry run tox -e type,lint
    cache:
      paths:
        - .venv
        - .tox
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push" # This job should not be triggered by the versioning push.
          changes:
          - VERSION.txt
          when: never
        - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG != "stable" # The job shall not run if a tag is pushed to the repository which is not a "stable" tag.
          when: never
        - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
pages:
  tags:
    - $CI_RUNNER_TAG_COMMON
  image: python:3.8
  stage: release
  before_script:
    - curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 -
    - export PATH="/opt/poetry/bin:$PATH"
    - poetry config http-basic.autolern-pypi $CI_REPO_TOKEN_NAME $CI_REPO_TOKEN_VALUE
    - poetry --version
    - poetry config --local virtualenvs.in-project true
    - poetry install --with docs
    - apt-get update
    - apt-get -y install pandoc
  script:
    - cd docs
    - poetry run sphinx-apidoc -o ./source ../src/composo
    - poetry run make html
    - mv build/html/ ../public/
  cache:
    paths:
      - .venv
  artifacts:
    paths:
      - public
  only:
    - main

